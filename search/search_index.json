{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"css/","text":"My Javascript Codes My CSS . Fix APEX Modal Dialog size Give the modal dialog this class, changing 300x200 for WIDTHxHEIGHT values. js-dialog-size300x200","title":"CSS"},{"location":"css/#my-javascript-codes","text":"My CSS .","title":"My Javascript Codes"},{"location":"css/#fix-apex-modal-dialog-size","text":"Give the modal dialog this class, changing 300x200 for WIDTHxHEIGHT values. js-dialog-size300x200","title":"Fix APEX Modal Dialog size"},{"location":"javascript/","text":"My Javascript Codes My Javascript Repository . Apex Loading Object to add/remove loading from apex. let isLoading=false; let load = { on: function() { if (isLoading===true){ console.log(\"Loading already on.\"); } else setTimeout(function(){ $wP = apex.widget.waitPopup(); isLoading = true; },100); }, off: function() { if (isLoading===true) { setTimeout(function(){ $wP.remove(); isLoading = false; },100); } else { console.log(\"Loading not on.\") } } } Number Pad Prototype to give leading 0's to a number Number.prototype.pad = function(size) { var s = String(this); while (s.length < (size || 2)) {s = \"0\" + s;} return s; } apex.server.process How to use an apex.server.process to call an Ajax Callback Process from the server, with exemple of it's parameters. let num = 1, str = \"teste\", arr = [1,2,3,4], pageitems: \"#P1_ITEM1, #P1_ITEM2, #P3_ITEM3\"; apex.server.process('AJAXCALLBACK_NAME', {pageItems: pageitems, x01:num, x02:str, f01:arr}, {dataType:\"text\"}) .then(function(data) { console.log(data); }); Things to know AJAXCALLBACK_NAME Name of the PLSQL process created that will return a value to the 'data' variable. pageItems String with the Apex items that will be submited to the process called. Each item must have the '#' before it's name, and for multiple items, separate them with a comma. x01 You can pass up to 10 variables as x01..x10 to the callback. f01 You can pass up to 10 array of variables as f01..f20 to the callback. dataType Type of variable returned by the callback. Remove this option to recieve an object. Array Comparsion Check if the value of every index is equal between arrays. function isArrEqual(arr1, arr2) { for (let i=0;i<arr1.length;i++) { if (arr1[i]!=arr2[i]) { return false } } return true } Print HTML Element Print the HTML element with givin ID. function Print(el) { let html='<html><body>'; html+= document.getElementById(el).innerHTML; html+='</body></html>'; var printWin = window.open(); printWin.document.write(html); printWin.document.close(); printWin.focus(); printWin.print(); printWin.close(); } Promise A simple example about how to use a promise. function NewPromise(value) { return new Promise ((resolve, reject)=> { //Do the process here, and use 'resolve' to return the promise, or reject to fail the promise if (value==1) { resolve(true); } else { reject(false); } }); } The use of a promise: NewPromise(5) .then(function(res){ console.log(res) }).catch(function(err){ console.log(err) }); Download CSV Uses an array of objects to download a CSV file formated with some options. - Function to Convert the array to string This function uses the argument passed to the download function to generate the string. The argument is an object that have the following keys: filename: String. The name of the file to be download. This string need to have the extension to be download. Ex: 'report.csv' , 'report.txt' . arr: Array of objects. The array of objects to be converted. Ex: [{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}] . header: True or False . If the header of the columns should be included in the file or not. colDelimiter: String. The separator of the values. If no value is given, the standard comma characater ',' will be used to separate. Ex: ',' , ';' . lineDelimiter: String. The separator of the lines. If no value is given, the standard new lines character '\\n' will be used. Ex: '\\n' , '\\r' . - Download Function Call the functions downloadCSV(object) with an object that have the value for the keys described above. function downloadCSV(args) { let data, filename, link, argsConvert; filename = args.filename != undefined ? args.filename : 'file.csv'; argsConvert = { name: filename, data: args.arr, header: args.header, colDelimiter: args.colDelimiter != undefined ? args.colDelimiter : ',', lineDelimiter: args.lineDelimiter != undefined ? args.lineDelimiter : '\\n' } let csv = convertArrayOfObjectsToCSV(argsConvert); if (csv == null) return; if (!csv.match(/^data:text\\/csv/i)) { csv = 'data:text/csv;charset=utf-8,' + csv; } data = encodeURI(csv); link = document.createElement('a'); link.setAttribute('href', data); link.setAttribute('download', filename); link.click(); } function convertArrayOfObjectsToCSV(args) { let result, ctr, keys, data; data = args.data || null; if (data == null || !data.length) { return null; } keys = Object.keys(data[0]); result = ''; if (args.header) { result += keys.join(args.colDelimiter); result += args.lineDelimiter; } data.forEach(function(item) { ctr = 0; keys.forEach(function(key) { if (ctr > 0) result += args.colDelimiter; result += item[key]; ctr++; }); result += args.lineDelimiter; }); return result; } Usage example: let argsDownload = { filename: 'report.csv', arr: [{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}], header: true, colDelimiter: ';' }; downloadCSV(argsDownload); Calling this function with those arguments will download the file 'report.csv', with the content: a;b;c 1;2;3 4;5;6 7;8;9","title":"Javascript"},{"location":"javascript/#my-javascript-codes","text":"My Javascript Repository .","title":"My Javascript Codes"},{"location":"javascript/#apex-loading","text":"Object to add/remove loading from apex. let isLoading=false; let load = { on: function() { if (isLoading===true){ console.log(\"Loading already on.\"); } else setTimeout(function(){ $wP = apex.widget.waitPopup(); isLoading = true; },100); }, off: function() { if (isLoading===true) { setTimeout(function(){ $wP.remove(); isLoading = false; },100); } else { console.log(\"Loading not on.\") } } }","title":"Apex Loading"},{"location":"javascript/#number-pad","text":"Prototype to give leading 0's to a number Number.prototype.pad = function(size) { var s = String(this); while (s.length < (size || 2)) {s = \"0\" + s;} return s; }","title":"Number Pad"},{"location":"javascript/#apexserverprocess","text":"How to use an apex.server.process to call an Ajax Callback Process from the server, with exemple of it's parameters. let num = 1, str = \"teste\", arr = [1,2,3,4], pageitems: \"#P1_ITEM1, #P1_ITEM2, #P3_ITEM3\"; apex.server.process('AJAXCALLBACK_NAME', {pageItems: pageitems, x01:num, x02:str, f01:arr}, {dataType:\"text\"}) .then(function(data) { console.log(data); });","title":"apex.server.process"},{"location":"javascript/#things-to-know","text":"AJAXCALLBACK_NAME Name of the PLSQL process created that will return a value to the 'data' variable. pageItems String with the Apex items that will be submited to the process called. Each item must have the '#' before it's name, and for multiple items, separate them with a comma. x01 You can pass up to 10 variables as x01..x10 to the callback. f01 You can pass up to 10 array of variables as f01..f20 to the callback. dataType Type of variable returned by the callback. Remove this option to recieve an object.","title":"Things to know"},{"location":"javascript/#array-comparsion","text":"Check if the value of every index is equal between arrays. function isArrEqual(arr1, arr2) { for (let i=0;i<arr1.length;i++) { if (arr1[i]!=arr2[i]) { return false } } return true }","title":"Array Comparsion"},{"location":"javascript/#print-html-element","text":"Print the HTML element with givin ID. function Print(el) { let html='<html><body>'; html+= document.getElementById(el).innerHTML; html+='</body></html>'; var printWin = window.open(); printWin.document.write(html); printWin.document.close(); printWin.focus(); printWin.print(); printWin.close(); }","title":"Print HTML Element"},{"location":"javascript/#promise","text":"A simple example about how to use a promise. function NewPromise(value) { return new Promise ((resolve, reject)=> { //Do the process here, and use 'resolve' to return the promise, or reject to fail the promise if (value==1) { resolve(true); } else { reject(false); } }); }","title":"Promise"},{"location":"javascript/#the-use-of-a-promise","text":"NewPromise(5) .then(function(res){ console.log(res) }).catch(function(err){ console.log(err) });","title":"The use of a promise:"},{"location":"javascript/#download-csv","text":"Uses an array of objects to download a CSV file formated with some options.","title":"Download CSV"},{"location":"javascript/#-function-to-convert-the-array-to-string","text":"This function uses the argument passed to the download function to generate the string. The argument is an object that have the following keys: filename: String. The name of the file to be download. This string need to have the extension to be download. Ex: 'report.csv' , 'report.txt' . arr: Array of objects. The array of objects to be converted. Ex: [{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}] . header: True or False . If the header of the columns should be included in the file or not. colDelimiter: String. The separator of the values. If no value is given, the standard comma characater ',' will be used to separate. Ex: ',' , ';' . lineDelimiter: String. The separator of the lines. If no value is given, the standard new lines character '\\n' will be used. Ex: '\\n' , '\\r' .","title":"- Function to Convert the array to string"},{"location":"javascript/#-download-function","text":"Call the functions downloadCSV(object) with an object that have the value for the keys described above. function downloadCSV(args) { let data, filename, link, argsConvert; filename = args.filename != undefined ? args.filename : 'file.csv'; argsConvert = { name: filename, data: args.arr, header: args.header, colDelimiter: args.colDelimiter != undefined ? args.colDelimiter : ',', lineDelimiter: args.lineDelimiter != undefined ? args.lineDelimiter : '\\n' } let csv = convertArrayOfObjectsToCSV(argsConvert); if (csv == null) return; if (!csv.match(/^data:text\\/csv/i)) { csv = 'data:text/csv;charset=utf-8,' + csv; } data = encodeURI(csv); link = document.createElement('a'); link.setAttribute('href', data); link.setAttribute('download', filename); link.click(); } function convertArrayOfObjectsToCSV(args) { let result, ctr, keys, data; data = args.data || null; if (data == null || !data.length) { return null; } keys = Object.keys(data[0]); result = ''; if (args.header) { result += keys.join(args.colDelimiter); result += args.lineDelimiter; } data.forEach(function(item) { ctr = 0; keys.forEach(function(key) { if (ctr > 0) result += args.colDelimiter; result += item[key]; ctr++; }); result += args.lineDelimiter; }); return result; } Usage example: let argsDownload = { filename: 'report.csv', arr: [{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}], header: true, colDelimiter: ';' }; downloadCSV(argsDownload); Calling this function with those arguments will download the file 'report.csv', with the content: a;b;c 1;2;3 4;5;6 7;8;9","title":"- Download Function"},{"location":"plsql/","text":"My PLSQL Codes My PLSQL Repository . PLSQL block to apex.server.process Model of a plsql block that return an object to the call of the apex.server.process declare c1 SYS_REFCURSOR; begin open c1 for select 1 \"number\", a \"letter\" from dual union select 2 \"number\", b \"letter\" from dual; APEX_JSON.OPEN_OBJECT; APEX_JSON.WRITE('db', c1); APEX_JSON.CLOSE_OBJECT; end; This will return the object {\"db\":[{\"number\":1, \"letter\":\"a\"}, {\"number\":2, \"letter\":\"b\"}]}","title":"PLSQL"},{"location":"plsql/#my-plsql-codes","text":"My PLSQL Repository .","title":"My PLSQL Codes"},{"location":"plsql/#plsql-block-to-apexserverprocess","text":"Model of a plsql block that return an object to the call of the apex.server.process declare c1 SYS_REFCURSOR; begin open c1 for select 1 \"number\", a \"letter\" from dual union select 2 \"number\", b \"letter\" from dual; APEX_JSON.OPEN_OBJECT; APEX_JSON.WRITE('db', c1); APEX_JSON.CLOSE_OBJECT; end; This will return the object {\"db\":[{\"number\":1, \"letter\":\"a\"}, {\"number\":2, \"letter\":\"b\"}]}","title":"PLSQL block to apex.server.process"},{"location":"statement_plsql/","text":"Oracle SQL statements Mostly copied from w3schools.com/sql/ Get First and Last day of curent month To get first and last days of the month of a given date: select trunc(sysdate) - (to_number(to_char(sysdate,'DD')) - 1) \"First Day\", add_months(trunc(sysdate) - (to_number(to_char(sysdate,'DD')) - 1), 1) -1 \"Last Day\" from dual;","title":"SQL"},{"location":"statement_plsql/#oracle-sql-statements","text":"Mostly copied from w3schools.com/sql/","title":"Oracle SQL statements"},{"location":"statement_plsql/#get-first-and-last-day-of-curent-month","text":"To get first and last days of the month of a given date: select trunc(sysdate) - (to_number(to_char(sysdate,'DD')) - 1) \"First Day\", add_months(trunc(sysdate) - (to_number(to_char(sysdate,'DD')) - 1), 1) -1 \"Last Day\" from dual;","title":"Get First and Last day of curent month"}]}